（1）中序法(infix)：运算符在操作数中间
（2）前序法(prefix)：运算符在操作数的前面
（3）后序法(postfix)：运算符在操作数的后面
example:
infix=> 6+2*9/3+4*2-8
prefix=> -++6/*293*428
postfix=>629*3/+42*+8-

中序==>前序：
（1）先把表达式按照运算符优先级以括号括起来；
example=>(((6 + ((2 * 9) / 3)) + (4 * 2)) - 8)
（2）针对运算符，用括号内的运算符取代所有左括号，以最近者优先
example=>-++6/*293*428
（3）将所有右括号去掉，即为前序表达式
中序==>后序：
同上，将左括号改为右括号即可
example=>629*3/+42*+8-

堆栈法：
infix=>prefix
s1:从右到左依次读进表达式每个字符
s2:如果字符为操作数，直接输出到前序表达式中
s3:如果遇到"("，就弹出堆栈内的运算符，直到弹出一个")"，与"("相抵消
s4:")"在堆栈内优先级最低，在堆栈外优先级最高
s5:当运算符进入堆栈时，必须与堆栈顶的运算符比较，如果外面的运算符优先级高于或等于堆栈顶端运算符，就压入堆栈；否则就弹出堆栈顶端运算符，直到堆栈顶端运算符优先级不低于待压入运算符会堆栈为空时，压入运算符
s5:表达式读完后，若堆栈不为空，则将其运算符依次弹出

infix=>postfix:
s1:从左到右读进中序表达式每个字符
s2:如果字符为操作数，就直接输出到后序表达式中
s3:如果遇到")"，就弹出堆栈内的运算符，直到弹出一个"("，与"("相抵消
s4:"("在堆栈内优先级最低，在堆栈外优先级最高
s5:当运算符进入堆栈时，必须与堆栈顶的运算符比较，如果外面的运算符优先级高于或等于堆栈顶端运算符，就压入堆栈；否则就弹出堆栈顶端运算符，直到堆栈顶端运算符优先级不低于待压入运算符会堆栈为空时，压入运算符
s5:表达式读完后，若堆栈不为空，则将其运算符依次弹出
